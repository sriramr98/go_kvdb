// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	network "gitub.com/sriramr98/go_kvdb/core/network"
)

// ListenFunc is an autogenerated mock type for the ListenFunc type
type ListenFunc struct {
	mock.Mock
}

// Execute provides a mock function with given fields: _a0, laddr
func (_m *ListenFunc) Execute(_a0 string, laddr string) (network.Listener, error) {
	ret := _m.Called(_a0, laddr)

	var r0 network.Listener
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (network.Listener, error)); ok {
		return rf(_a0, laddr)
	}
	if rf, ok := ret.Get(0).(func(string, string) network.Listener); ok {
		r0 = rf(_a0, laddr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(network.Listener)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(_a0, laddr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewListenFunc interface {
	mock.TestingT
	Cleanup(func())
}

// NewListenFunc creates a new instance of ListenFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewListenFunc(t mockConstructorTestingTNewListenFunc) *ListenFunc {
	mock := &ListenFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
