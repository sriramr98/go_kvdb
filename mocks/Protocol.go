// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	protocol "gitub.com/sriramr98/go_kvdb/core/protocol"
)

// Protocol is an autogenerated mock type for the Protocol type
type Protocol struct {
	mock.Mock
}

// Parse provides a mock function with given fields: input
func (_m *Protocol) Parse(input string) (protocol.Request, error) {
	ret := _m.Called(input)

	var r0 protocol.Request
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (protocol.Request, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(string) protocol.Request); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(protocol.Request)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewProtocol interface {
	mock.TestingT
	Cleanup(func())
}

// NewProtocol creates a new instance of Protocol. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProtocol(t mockConstructorTestingTNewProtocol) *Protocol {
	mock := &Protocol{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
