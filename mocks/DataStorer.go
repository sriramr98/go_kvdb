// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// DataStorer is an autogenerated mock type for the DataStorer type
type DataStorer[K comparable, V interface{}] struct {
	mock.Mock
}

// Delete provides a mock function with given fields: key
func (_m *DataStorer[K, V]) Delete(key K) {
	_m.Called(key)
}

// Get provides a mock function with given fields: key
func (_m *DataStorer[K, V]) Get(key K) (V, error) {
	ret := _m.Called(key)

	var r0 V
	var r1 error
	if rf, ok := ret.Get(0).(func(K) (V, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(K) V); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(V)
	}

	if rf, ok := ret.Get(1).(func(K) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *DataStorer[K, V]) GetAll() map[K]V {
	ret := _m.Called()

	var r0 map[K]V
	if rf, ok := ret.Get(0).(func() map[K]V); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[K]V)
		}
	}

	return r0
}

// GetAllKeys provides a mock function with given fields:
func (_m *DataStorer[K, V]) GetAllKeys() []K {
	ret := _m.Called()

	var r0 []K
	if rf, ok := ret.Get(0).(func() []K); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]K)
		}
	}

	return r0
}

// Set provides a mock function with given fields: key, value
func (_m *DataStorer[K, V]) Set(key K, value V) {
	_m.Called(key, value)
}

// SetAll provides a mock function with given fields: data
func (_m *DataStorer[K, V]) SetAll(data map[K]V) {
	_m.Called(data)
}

type mockConstructorTestingTNewDataStorer interface {
	mock.TestingT
	Cleanup(func())
}

// NewDataStorer creates a new instance of DataStorer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDataStorer[K comparable, V interface{}](t mockConstructorTestingTNewDataStorer) *DataStorer[K, V] {
	mock := &DataStorer[K, V]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
